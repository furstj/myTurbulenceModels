/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | www.openfoam.com
     \\/     M anipulation  |
-------------------------------------------------------------------------------
    Copyright (C) 2015 OpenFOAM Foundation
    Copyright (C) 2022 Upstream CFD GmbH
    Copyright (C) 2019, 2022 OpenCFD Ltd.
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

Class
    Foam::LESModels::gammaSSTDDES

Group
    grpDESTurbulence

Description
    gamma-SST DDES transition and turbulence model for incompressible and compressible flows.

    Reference:
    \verbatim
        Gritskevich, M. S., Garbaruk, A. V.,
        Schütze, J., & Menter, F. R. (2012).
        Development of DDES and IDDES formulations for
        the k-ω shear stress transport model.
        Flow, turbulence and combustion, 88(3), 431-449.
        DOI:10.1007/s10494-011-9378-4

        Menter, Florian R., Pavel E. Smirnov, Tao Liu a Ravikanth Avancha. 
        A one-equation local correlation-based transition model. 
        Flow, Turbulence and Combustion. 2015, 95(4), 583–619. ISSN 1386-6184. 
        doi:10.1007/s10494-015-9622-4
    \endverbatim

SourceFiles
    gammaSSTDDES.C

\*---------------------------------------------------------------------------*/

#ifndef Foam_gammaSSTDDES_H
#define Foam_gammaSSTDDES_H

#include "gammaSSTDES.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{
namespace LESModels
{

/*---------------------------------------------------------------------------*\
                        Class gammaSSTDDES Declaration
\*---------------------------------------------------------------------------*/

template<class BasicTurbulenceModel>
class gammaSSTDDES
:
    public gammaSSTDES<BasicTurbulenceModel>
{
    // Private Member Functions

        //- Return the shielding function field
        tmp<volScalarField> fd(const volScalarField& magGradU) const;

        //- No copy construct
        gammaSSTDDES(const gammaSSTDDES&) = delete;

        //- No copy assignment
        void operator=(const gammaSSTDDES&) = delete;


protected:

    // Protected Data

        // Model coefficients

            dimensionedScalar Cd1_;
            dimensionedScalar Cd2_;


    // Protected Member Functions

        //- Return square of strain rate
        virtual tmp<volScalarField> S2
        (
            const volTensorField& gradU
        ) const;

        //- Length scale
        virtual tmp<volScalarField> dTilda
        (
            const volScalarField& magGradU,
            const volScalarField& CDES
        ) const;

        //- Return (G/nu)_0
        virtual tmp<volScalarField::Internal> GbyNu0
        (
            const volTensorField& gradU,
            const volScalarField& S2
        ) const;

        //- Return G/nu
        virtual tmp<volScalarField::Internal> GbyNu
        (
            const volScalarField::Internal& GbyNu0,
            const volScalarField::Internal& F2,
            const volScalarField::Internal& S2
        ) const;

public:

    typedef typename BasicTurbulenceModel::alphaField alphaField;
    typedef typename BasicTurbulenceModel::rhoField rhoField;
    typedef typename BasicTurbulenceModel::transportModel transportModel;


    //- Runtime type information
    TypeName("gammaSSTDDES");


    // Constructors

        //- Construct from components
        gammaSSTDDES
        (
            const alphaField& alpha,
            const rhoField& rho,
            const volVectorField& U,
            const surfaceScalarField& alphaRhoPhi,
            const surfaceScalarField& phi,
            const transportModel& transport,
            const word& propertiesName = turbulenceModel::propertiesName,
            const word& type = typeName
        );


    //- Destructor
    virtual ~gammaSSTDDES() = default;


    // Member Functions

        //- Re-read model coefficients if they have changed
        virtual bool read();

        //- Return the shielding function
        virtual tmp<volScalarField> fd() const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace LESModels
} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#ifdef NoRepository
#   include "gammaSSTDDES.C"
#endif

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
